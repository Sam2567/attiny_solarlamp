
attiny_pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000618  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004a9  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002aa  00000000  00000000  00000db9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001064  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000310  00000000  00000000  00001144  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002c0  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001714  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7a d0       	rcall	.+244    	; 0x112 <main>
  1e:	e1 c0       	rjmp	.+450    	; 0x1e2 <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <pwm_init>:
#define sw1 ~PINB & 0x04


static void pwm_init(void)
{
    DDRB |= (1 << 0); // set PWM pin as OUTPUT
  22:	87 b3       	in	r24, 0x17	; 23
  24:	81 60       	ori	r24, 0x01	; 1
  26:	87 bb       	out	0x17, r24	; 23
    TCCR0A |= F_PWM; // set timer mode to FAST PWM
  28:	8f b5       	in	r24, 0x2f	; 47
  2a:	8b 60       	ori	r24, 0x0B	; 11
  2c:	8f bd       	out	0x2f, r24	; 47
    TCCR0A |= (1 << COM0A1); // connect PWM signal to pin (AC0A => PB0)
  2e:	8f b5       	in	r24, 0x2f	; 47
  30:	80 68       	ori	r24, 0x80	; 128
  32:	8f bd       	out	0x2f, r24	; 47
  34:	08 95       	ret

00000036 <ADC_init>:
}

static void ADC_init(void){
	ADMUX |= ADC_3;
  36:	87 b1       	in	r24, 0x07	; 7
  38:	83 60       	ori	r24, 0x03	; 3
  3a:	87 b9       	out	0x07, r24	; 7
	ADCSRA|= (1 << ADEN);
  3c:	86 b1       	in	r24, 0x06	; 6
  3e:	80 68       	ori	r24, 0x80	; 128
  40:	86 b9       	out	0x06, r24	; 6
  42:	08 95       	ret

00000044 <pwm_set_frequency>:
}


static void pwm_set_frequency(uint32_t N)
{
    TCCR0B = (TCCR0B & ~((1<<CS02)|(1<<CS01)|(1<<CS00))) | N; // set prescaler
  44:	83 b7       	in	r24, 0x33	; 51
  46:	88 7f       	andi	r24, 0xF8	; 248
  48:	68 2b       	or	r22, r24
  4a:	63 bf       	out	0x33, r22	; 51
  4c:	08 95       	ret

0000004e <pwm_set_duty>:
}

static void pwm_set_duty(uint8_t duty)
{

    OCR0A = duty; // set the OCR
  4e:	86 bf       	out	0x36, r24	; 54
  50:	08 95       	ret

00000052 <ADC_Read>:

uint32_t ADC_Read()
{
	uint32_t Ain,AinLow;
	//start conversion
	ADCSRA |=(1 << ADSC);
  52:	86 b1       	in	r24, 0x06	; 6
  54:	80 64       	ori	r24, 0x40	; 64
  56:	86 b9       	out	0x06, r24	; 6
	//config ADC Prescaler Select Bits
	ADCSRA|= S_128;
  58:	86 b1       	in	r24, 0x06	; 6
  5a:	87 60       	ori	r24, 0x07	; 7
  5c:	86 b9       	out	0x06, r24	; 6
	//wait until conversion complete
	while((ADCSRA&(1<<ADIF))==0);
  5e:	34 9b       	sbis	0x06, 4	; 6
  60:	fe cf       	rjmp	.-4      	; 0x5e <ADC_Read+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  62:	80 e2       	ldi	r24, 0x20	; 32
  64:	8a 95       	dec	r24
  66:	f1 f7       	brne	.-4      	; 0x64 <ADC_Read+0x12>
	_delay_us(10);
	
	AinLow = ADCL;
  68:	24 b1       	in	r18, 0x04	; 4
	Ain = ADCH;
  6a:	65 b1       	in	r22, 0x05	; 5
  6c:	86 2f       	mov	r24, r22
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	a0 e0       	ldi	r26, 0x00	; 0
  72:	b0 e0       	ldi	r27, 0x00	; 0
	Ain = Ain << 8;
  74:	ba 2f       	mov	r27, r26
  76:	a9 2f       	mov	r26, r25
  78:	98 2f       	mov	r25, r24
  7a:	88 27       	eor	r24, r24
	Ain = Ain | AinLow;
  7c:	bc 01       	movw	r22, r24
  7e:	cd 01       	movw	r24, r26
  80:	62 2b       	or	r22, r18
	return Ain;
}
  82:	08 95       	ret

00000084 <map>:

    OCR0A = duty; // set the OCR
}


uint32_t map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max) {
  84:	4f 92       	push	r4
  86:	5f 92       	push	r5
  88:	6f 92       	push	r6
  8a:	7f 92       	push	r7
  8c:	af 92       	push	r10
  8e:	bf 92       	push	r11
  90:	cf 92       	push	r12
  92:	df 92       	push	r13
  94:	ef 92       	push	r14
  96:	ff 92       	push	r15
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	dd 27       	eor	r29, r29
  a4:	c4 50       	subi	r28, 0x04	; 4
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	29 01       	movw	r4, r18
  aa:	3a 01       	movw	r6, r20
  ac:	e9 82       	std	Y+1, r14	; 0x01
  ae:	fa 82       	std	Y+2, r15	; 0x02
  b0:	0b 83       	std	Y+3, r16	; 0x03
  b2:	1c 83       	std	Y+4, r17	; 0x04
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  b4:	62 1b       	sub	r22, r18
  b6:	73 0b       	sbc	r23, r19
  b8:	84 0b       	sbc	r24, r20
  ba:	95 0b       	sbc	r25, r21
  bc:	0d 89       	ldd	r16, Y+21	; 0x15
  be:	1e 89       	ldd	r17, Y+22	; 0x16
  c0:	2f 89       	ldd	r18, Y+23	; 0x17
  c2:	38 8d       	ldd	r19, Y+24	; 0x18
  c4:	a9 01       	movw	r20, r18
  c6:	98 01       	movw	r18, r16
  c8:	2a 19       	sub	r18, r10
  ca:	3b 09       	sbc	r19, r11
  cc:	4c 09       	sbc	r20, r12
  ce:	5d 09       	sbc	r21, r13
  d0:	4d d0       	rcall	.+154    	; 0x16c <__mulsi3>
  d2:	29 81       	ldd	r18, Y+1	; 0x01
  d4:	3a 81       	ldd	r19, Y+2	; 0x02
  d6:	4b 81       	ldd	r20, Y+3	; 0x03
  d8:	5c 81       	ldd	r21, Y+4	; 0x04
  da:	24 19       	sub	r18, r4
  dc:	35 09       	sbc	r19, r5
  de:	46 09       	sbc	r20, r6
  e0:	57 09       	sbc	r21, r7
  e2:	5d d0       	rcall	.+186    	; 0x19e <__udivmodsi4>
  e4:	c6 01       	movw	r24, r12
  e6:	b5 01       	movw	r22, r10
  e8:	62 0f       	add	r22, r18
  ea:	73 1f       	adc	r23, r19
  ec:	84 1f       	adc	r24, r20
  ee:	95 1f       	adc	r25, r21
}
  f0:	cc 5f       	subi	r28, 0xFC	; 252
  f2:	cd bf       	out	0x3d, r28	; 61
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	1f 91       	pop	r17
  fa:	0f 91       	pop	r16
  fc:	ff 90       	pop	r15
  fe:	ef 90       	pop	r14
 100:	df 90       	pop	r13
 102:	cf 90       	pop	r12
 104:	bf 90       	pop	r11
 106:	af 90       	pop	r10
 108:	7f 90       	pop	r7
 10a:	6f 90       	pop	r6
 10c:	5f 90       	pop	r5
 10e:	4f 90       	pop	r4
 110:	08 95       	ret

00000112 <main>:

int main(void)
{
	DDRB &=~(1 << 2);
 112:	87 b3       	in	r24, 0x17	; 23
 114:	8b 7f       	andi	r24, 0xFB	; 251
 116:	87 bb       	out	0x17, r24	; 23
	PORTB|=(1 << 2);
 118:	88 b3       	in	r24, 0x18	; 24
 11a:	84 60       	ori	r24, 0x04	; 4
 11c:	88 bb       	out	0x18, r24	; 24
    /* setup */
    pwm_init();
 11e:	81 df       	rcall	.-254    	; 0x22 <pwm_init>
    pwm_set_frequency(N_1);
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	8d df       	rcall	.-230    	; 0x44 <pwm_set_frequency>
	ADC_init();
 12a:	85 df       	rcall	.-246    	; 0x36 <ADC_init>
    /* loop */
   while (1)
   {
	   uint32_t reading = ADC_Read();
 12c:	92 df       	rcall	.-220    	; 0x52 <ADC_Read>
	   
	   pwm_set_duty(map(reading, 0, 1023, 0, 255));
 12e:	1f 92       	push	r1
 130:	1f 92       	push	r1
 132:	1f 92       	push	r1
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	2f 93       	push	r18
 138:	a1 2c       	mov	r10, r1
 13a:	b1 2c       	mov	r11, r1
 13c:	65 01       	movw	r12, r10
 13e:	ee 24       	eor	r14, r14
 140:	ea 94       	dec	r14
 142:	13 e0       	ldi	r17, 0x03	; 3
 144:	f1 2e       	mov	r15, r17
 146:	00 e0       	ldi	r16, 0x00	; 0
 148:	10 e0       	ldi	r17, 0x00	; 0
 14a:	20 e0       	ldi	r18, 0x00	; 0
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	a9 01       	movw	r20, r18
 150:	99 df       	rcall	.-206    	; 0x84 <map>
 152:	0f 90       	pop	r0
 154:	0f 90       	pop	r0
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	86 2f       	mov	r24, r22
 15c:	78 df       	rcall	.-272    	; 0x4e <pwm_set_duty>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	8f e5       	ldi	r24, 0x5F	; 95
 160:	99 e0       	ldi	r25, 0x09	; 9
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <main+0x50>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0x56>
 168:	00 00       	nop
 16a:	e0 cf       	rjmp	.-64     	; 0x12c <main+0x1a>

0000016c <__mulsi3>:
 16c:	ee 27       	eor	r30, r30
 16e:	ff 27       	eor	r31, r31

00000170 <__mulsi3_helper>:
 170:	aa 27       	eor	r26, r26
 172:	bb 27       	eor	r27, r27
 174:	08 c0       	rjmp	.+16     	; 0x186 <__mulsi3_helper+0x16>
 176:	a2 0f       	add	r26, r18
 178:	b3 1f       	adc	r27, r19
 17a:	e4 1f       	adc	r30, r20
 17c:	f5 1f       	adc	r31, r21
 17e:	22 0f       	add	r18, r18
 180:	33 1f       	adc	r19, r19
 182:	44 1f       	adc	r20, r20
 184:	55 1f       	adc	r21, r21
 186:	96 95       	lsr	r25
 188:	87 95       	ror	r24
 18a:	77 95       	ror	r23
 18c:	67 95       	ror	r22
 18e:	98 f3       	brcs	.-26     	; 0x176 <__mulsi3_helper+0x6>
 190:	70 40       	sbci	r23, 0x00	; 0
 192:	a9 f7       	brne	.-22     	; 0x17e <__mulsi3_helper+0xe>
 194:	00 97       	sbiw	r24, 0x00	; 0
 196:	99 f7       	brne	.-26     	; 0x17e <__mulsi3_helper+0xe>
 198:	bd 01       	movw	r22, r26
 19a:	cf 01       	movw	r24, r30
 19c:	08 95       	ret

0000019e <__udivmodsi4>:
 19e:	a1 e2       	ldi	r26, 0x21	; 33
 1a0:	1a 2e       	mov	r1, r26
 1a2:	aa 1b       	sub	r26, r26
 1a4:	bb 1b       	sub	r27, r27
 1a6:	fd 01       	movw	r30, r26
 1a8:	0d c0       	rjmp	.+26     	; 0x1c4 <__udivmodsi4_ep>

000001aa <__udivmodsi4_loop>:
 1aa:	aa 1f       	adc	r26, r26
 1ac:	bb 1f       	adc	r27, r27
 1ae:	ee 1f       	adc	r30, r30
 1b0:	ff 1f       	adc	r31, r31
 1b2:	a2 17       	cp	r26, r18
 1b4:	b3 07       	cpc	r27, r19
 1b6:	e4 07       	cpc	r30, r20
 1b8:	f5 07       	cpc	r31, r21
 1ba:	20 f0       	brcs	.+8      	; 0x1c4 <__udivmodsi4_ep>
 1bc:	a2 1b       	sub	r26, r18
 1be:	b3 0b       	sbc	r27, r19
 1c0:	e4 0b       	sbc	r30, r20
 1c2:	f5 0b       	sbc	r31, r21

000001c4 <__udivmodsi4_ep>:
 1c4:	66 1f       	adc	r22, r22
 1c6:	77 1f       	adc	r23, r23
 1c8:	88 1f       	adc	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	1a 94       	dec	r1
 1ce:	69 f7       	brne	.-38     	; 0x1aa <__udivmodsi4_loop>
 1d0:	60 95       	com	r22
 1d2:	70 95       	com	r23
 1d4:	80 95       	com	r24
 1d6:	90 95       	com	r25
 1d8:	9b 01       	movw	r18, r22
 1da:	ac 01       	movw	r20, r24
 1dc:	bd 01       	movw	r22, r26
 1de:	cf 01       	movw	r24, r30
 1e0:	08 95       	ret

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
