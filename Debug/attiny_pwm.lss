
attiny_pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005fc  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004b4  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a0  00000000  00000000  00000db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001054  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030d  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002c0  00000000  00000000  00001431  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000016f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	78 d0       	rcall	.+240    	; 0x10e <main>
  1e:	ec c0       	rjmp	.+472    	; 0x1f8 <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <pwm_init>:
#define sw1 ~PINB & 0x04


static void pwm_init(void)
{
    DDRB |= (1 << 0); // set PWM pin as OUTPUT
  22:	87 b3       	in	r24, 0x17	; 23
  24:	81 60       	ori	r24, 0x01	; 1
  26:	87 bb       	out	0x17, r24	; 23
    TCCR0A |= F_PWM; // set timer mode to FAST PWM
  28:	8f b5       	in	r24, 0x2f	; 47
  2a:	8b 60       	ori	r24, 0x0B	; 11
  2c:	8f bd       	out	0x2f, r24	; 47
    TCCR0A |= (1 << COM0A1); // connect PWM signal to pin (AC0A => PB0)
  2e:	8f b5       	in	r24, 0x2f	; 47
  30:	80 68       	ori	r24, 0x80	; 128
  32:	8f bd       	out	0x2f, r24	; 47
  34:	08 95       	ret

00000036 <ADC_init>:
}

static void ADC_init(void){
	ADMUX |= ADC_3;
  36:	87 b1       	in	r24, 0x07	; 7
  38:	83 60       	ori	r24, 0x03	; 3
  3a:	87 b9       	out	0x07, r24	; 7
	ADCSRA|= (1 << ADEN);
  3c:	86 b1       	in	r24, 0x06	; 6
  3e:	80 68       	ori	r24, 0x80	; 128
  40:	86 b9       	out	0x06, r24	; 6
  42:	08 95       	ret

00000044 <pwm_set_frequency>:
}


static void pwm_set_frequency(uint32_t N)
{
    TCCR0B = (TCCR0B & ~((1<<CS02)|(1<<CS01)|(1<<CS00))) | N; // set prescaler
  44:	83 b7       	in	r24, 0x33	; 51
  46:	88 7f       	andi	r24, 0xF8	; 248
  48:	68 2b       	or	r22, r24
  4a:	63 bf       	out	0x33, r22	; 51
  4c:	08 95       	ret

0000004e <ADC_Read>:

uint32_t ADC_Read()
{
	uint32_t Ain,AinLow;
	//start conversion
	ADCSRA |=(1 << ADSC);
  4e:	86 b1       	in	r24, 0x06	; 6
  50:	80 64       	ori	r24, 0x40	; 64
  52:	86 b9       	out	0x06, r24	; 6
	//config ADC Prescaler Select Bits
	ADCSRA|= S_128;
  54:	86 b1       	in	r24, 0x06	; 6
  56:	87 60       	ori	r24, 0x07	; 7
  58:	86 b9       	out	0x06, r24	; 6
	//wait until conversion complete
	while((ADCSRA&(1<<ADIF))==0);
  5a:	34 9b       	sbis	0x06, 4	; 6
  5c:	fe cf       	rjmp	.-4      	; 0x5a <ADC_Read+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  5e:	80 e2       	ldi	r24, 0x20	; 32
  60:	8a 95       	dec	r24
  62:	f1 f7       	brne	.-4      	; 0x60 <ADC_Read+0x12>
	_delay_us(10);
	
	AinLow = ADCL;
  64:	24 b1       	in	r18, 0x04	; 4
	Ain = ADCH;
  66:	65 b1       	in	r22, 0x05	; 5
  68:	86 2f       	mov	r24, r22
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	a0 e0       	ldi	r26, 0x00	; 0
  6e:	b0 e0       	ldi	r27, 0x00	; 0
	Ain = Ain << 8;
  70:	ba 2f       	mov	r27, r26
  72:	a9 2f       	mov	r26, r25
  74:	98 2f       	mov	r25, r24
  76:	88 27       	eor	r24, r24
	Ain = Ain | AinLow;
  78:	bc 01       	movw	r22, r24
  7a:	cd 01       	movw	r24, r26
  7c:	62 2b       	or	r22, r18
	return Ain;
}
  7e:	08 95       	ret

00000080 <map>:

    OCR0A = duty; // set the OCR
}


uint32_t map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max) {
  80:	4f 92       	push	r4
  82:	5f 92       	push	r5
  84:	6f 92       	push	r6
  86:	7f 92       	push	r7
  88:	af 92       	push	r10
  8a:	bf 92       	push	r11
  8c:	cf 92       	push	r12
  8e:	df 92       	push	r13
  90:	ef 92       	push	r14
  92:	ff 92       	push	r15
  94:	0f 93       	push	r16
  96:	1f 93       	push	r17
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	dd 27       	eor	r29, r29
  a0:	c4 50       	subi	r28, 0x04	; 4
  a2:	cd bf       	out	0x3d, r28	; 61
  a4:	29 01       	movw	r4, r18
  a6:	3a 01       	movw	r6, r20
  a8:	e9 82       	std	Y+1, r14	; 0x01
  aa:	fa 82       	std	Y+2, r15	; 0x02
  ac:	0b 83       	std	Y+3, r16	; 0x03
  ae:	1c 83       	std	Y+4, r17	; 0x04
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  b0:	62 1b       	sub	r22, r18
  b2:	73 0b       	sbc	r23, r19
  b4:	84 0b       	sbc	r24, r20
  b6:	95 0b       	sbc	r25, r21
  b8:	0d 89       	ldd	r16, Y+21	; 0x15
  ba:	1e 89       	ldd	r17, Y+22	; 0x16
  bc:	2f 89       	ldd	r18, Y+23	; 0x17
  be:	38 8d       	ldd	r19, Y+24	; 0x18
  c0:	a9 01       	movw	r20, r18
  c2:	98 01       	movw	r18, r16
  c4:	2a 19       	sub	r18, r10
  c6:	3b 09       	sbc	r19, r11
  c8:	4c 09       	sbc	r20, r12
  ca:	5d 09       	sbc	r21, r13
  cc:	5a d0       	rcall	.+180    	; 0x182 <__mulsi3>
  ce:	29 81       	ldd	r18, Y+1	; 0x01
  d0:	3a 81       	ldd	r19, Y+2	; 0x02
  d2:	4b 81       	ldd	r20, Y+3	; 0x03
  d4:	5c 81       	ldd	r21, Y+4	; 0x04
  d6:	24 19       	sub	r18, r4
  d8:	35 09       	sbc	r19, r5
  da:	46 09       	sbc	r20, r6
  dc:	57 09       	sbc	r21, r7
  de:	6a d0       	rcall	.+212    	; 0x1b4 <__udivmodsi4>
  e0:	c6 01       	movw	r24, r12
  e2:	b5 01       	movw	r22, r10
  e4:	62 0f       	add	r22, r18
  e6:	73 1f       	adc	r23, r19
  e8:	84 1f       	adc	r24, r20
  ea:	95 1f       	adc	r25, r21
}
  ec:	cc 5f       	subi	r28, 0xFC	; 252
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	1f 91       	pop	r17
  f6:	0f 91       	pop	r16
  f8:	ff 90       	pop	r15
  fa:	ef 90       	pop	r14
  fc:	df 90       	pop	r13
  fe:	cf 90       	pop	r12
 100:	bf 90       	pop	r11
 102:	af 90       	pop	r10
 104:	7f 90       	pop	r7
 106:	6f 90       	pop	r6
 108:	5f 90       	pop	r5
 10a:	4f 90       	pop	r4
 10c:	08 95       	ret

0000010e <main>:

int main(void)
{
	DDRB &=~(1 << 2);
 10e:	87 b3       	in	r24, 0x17	; 23
 110:	8b 7f       	andi	r24, 0xFB	; 251
 112:	87 bb       	out	0x17, r24	; 23
	PORTB|=(1 << 2);
 114:	88 b3       	in	r24, 0x18	; 24
 116:	84 60       	ori	r24, 0x04	; 4
 118:	88 bb       	out	0x18, r24	; 24
	DDRB|=(1 << 4);
 11a:	87 b3       	in	r24, 0x17	; 23
 11c:	80 61       	ori	r24, 0x10	; 16
 11e:	87 bb       	out	0x17, r24	; 23
    /* setup */
    pwm_init();
 120:	80 df       	rcall	.-256    	; 0x22 <pwm_init>
    pwm_set_frequency(N_1);
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	8c df       	rcall	.-232    	; 0x44 <pwm_set_frequency>
	ADC_init();
 12c:	84 df       	rcall	.-248    	; 0x36 <ADC_init>
    /* loop */
   while (1)
   {
	   uint32_t reading = ADC_Read();
 12e:	8f df       	rcall	.-226    	; 0x4e <ADC_Read>
	   uint32_t map_value = map(reading, 0, 1023, 0, 255);
 130:	1f 92       	push	r1
 132:	1f 92       	push	r1
 134:	1f 92       	push	r1
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	2f 93       	push	r18
 13a:	a1 2c       	mov	r10, r1
 13c:	b1 2c       	mov	r11, r1
 13e:	65 01       	movw	r12, r10
 140:	ee 24       	eor	r14, r14
 142:	ea 94       	dec	r14
 144:	13 e0       	ldi	r17, 0x03	; 3
 146:	f1 2e       	mov	r15, r17
 148:	00 e0       	ldi	r16, 0x00	; 0
 14a:	10 e0       	ldi	r17, 0x00	; 0
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	a9 01       	movw	r20, r18
 152:	96 df       	rcall	.-212    	; 0x80 <map>
 154:	0f 90       	pop	r0
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
	   if(map_value < 170){
 15c:	6a 3a       	cpi	r22, 0xAA	; 170
 15e:	71 05       	cpc	r23, r1
 160:	81 05       	cpc	r24, r1
 162:	91 05       	cpc	r25, r1
 164:	20 f4       	brcc	.+8      	; 0x16e <main+0x60>
		   PORTB |=(1 << 4);
 166:	88 b3       	in	r24, 0x18	; 24
 168:	80 61       	ori	r24, 0x10	; 16
 16a:	88 bb       	out	0x18, r24	; 24
 16c:	03 c0       	rjmp	.+6      	; 0x174 <main+0x66>
	   }else{
		   PORTB &=~(1 << 4);
 16e:	88 b3       	in	r24, 0x18	; 24
 170:	8f 7e       	andi	r24, 0xEF	; 239
 172:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	8f e5       	ldi	r24, 0x5F	; 95
 176:	99 e0       	ldi	r25, 0x09	; 9
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0x6a>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0x70>
 17e:	00 00       	nop
 180:	d6 cf       	rjmp	.-84     	; 0x12e <main+0x20>

00000182 <__mulsi3>:
 182:	ee 27       	eor	r30, r30
 184:	ff 27       	eor	r31, r31

00000186 <__mulsi3_helper>:
 186:	aa 27       	eor	r26, r26
 188:	bb 27       	eor	r27, r27
 18a:	08 c0       	rjmp	.+16     	; 0x19c <__mulsi3_helper+0x16>
 18c:	a2 0f       	add	r26, r18
 18e:	b3 1f       	adc	r27, r19
 190:	e4 1f       	adc	r30, r20
 192:	f5 1f       	adc	r31, r21
 194:	22 0f       	add	r18, r18
 196:	33 1f       	adc	r19, r19
 198:	44 1f       	adc	r20, r20
 19a:	55 1f       	adc	r21, r21
 19c:	96 95       	lsr	r25
 19e:	87 95       	ror	r24
 1a0:	77 95       	ror	r23
 1a2:	67 95       	ror	r22
 1a4:	98 f3       	brcs	.-26     	; 0x18c <__mulsi3_helper+0x6>
 1a6:	70 40       	sbci	r23, 0x00	; 0
 1a8:	a9 f7       	brne	.-22     	; 0x194 <__mulsi3_helper+0xe>
 1aa:	00 97       	sbiw	r24, 0x00	; 0
 1ac:	99 f7       	brne	.-26     	; 0x194 <__mulsi3_helper+0xe>
 1ae:	bd 01       	movw	r22, r26
 1b0:	cf 01       	movw	r24, r30
 1b2:	08 95       	ret

000001b4 <__udivmodsi4>:
 1b4:	a1 e2       	ldi	r26, 0x21	; 33
 1b6:	1a 2e       	mov	r1, r26
 1b8:	aa 1b       	sub	r26, r26
 1ba:	bb 1b       	sub	r27, r27
 1bc:	fd 01       	movw	r30, r26
 1be:	0d c0       	rjmp	.+26     	; 0x1da <__udivmodsi4_ep>

000001c0 <__udivmodsi4_loop>:
 1c0:	aa 1f       	adc	r26, r26
 1c2:	bb 1f       	adc	r27, r27
 1c4:	ee 1f       	adc	r30, r30
 1c6:	ff 1f       	adc	r31, r31
 1c8:	a2 17       	cp	r26, r18
 1ca:	b3 07       	cpc	r27, r19
 1cc:	e4 07       	cpc	r30, r20
 1ce:	f5 07       	cpc	r31, r21
 1d0:	20 f0       	brcs	.+8      	; 0x1da <__udivmodsi4_ep>
 1d2:	a2 1b       	sub	r26, r18
 1d4:	b3 0b       	sbc	r27, r19
 1d6:	e4 0b       	sbc	r30, r20
 1d8:	f5 0b       	sbc	r31, r21

000001da <__udivmodsi4_ep>:
 1da:	66 1f       	adc	r22, r22
 1dc:	77 1f       	adc	r23, r23
 1de:	88 1f       	adc	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	1a 94       	dec	r1
 1e4:	69 f7       	brne	.-38     	; 0x1c0 <__udivmodsi4_loop>
 1e6:	60 95       	com	r22
 1e8:	70 95       	com	r23
 1ea:	80 95       	com	r24
 1ec:	90 95       	com	r25
 1ee:	9b 01       	movw	r18, r22
 1f0:	ac 01       	movw	r20, r24
 1f2:	bd 01       	movw	r22, r26
 1f4:	cf 01       	movw	r24, r30
 1f6:	08 95       	ret

000001f8 <_exit>:
 1f8:	f8 94       	cli

000001fa <__stop_program>:
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <__stop_program>
